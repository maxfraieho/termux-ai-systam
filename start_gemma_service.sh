#!/data/data/com.termux/files/usr/bin/bash
################################################################################
# Gemma Chat Service - HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —á–∞—Ç-–º–æ–¥–µ–ª–µ–π Gemma
# –ü—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ, –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
################################################################################

set -euo pipefail

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
LLAMA_SERVER="$HOME/llama.cpp/build/bin/llama-server"
MODEL_DIR="$HOME/models/gemma3n"
VARIANT="${VARIANT:-2B}"  # 2B –∞–±–æ 4B
PORT="${PORT:-8080}"
HOST="${HOST:-127.0.0.1}"  # 127.0.0.1 = –ª–æ–∫–∞–ª—å–Ω–æ, 0.0.0.0 = –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø (Tailscale)
THREADS=6
CTX_SIZE=2048

PID_FILE="$HOME/models/gemma3n/service.pid"
LOG_FILE="$HOME/models/gemma3n/service.log"

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

log() {
    echo -e "[$(date '+%H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

get_service_pid() {
    if [ -f "$PID_FILE" ]; then
        cat "$PID_FILE"
    fi
}

is_running() {
    local pid=$(get_service_pid)
    if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
        return 0
    fi
    return 1
}

stop_service() {
    local pid=$(get_service_pid)

    if [ -z "$pid" ]; then
        log "${YELLOW}–°–µ—Ä–≤—ñ—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ${NC}"
        return 0
    fi

    log "–ó—É–ø–∏–Ω–∫–∞ Gemma —Å–µ—Ä–≤—ñ—Å—É (PID: $pid)..."

    kill "$pid" 2>/dev/null || true
    sleep 2

    if kill -0 "$pid" 2>/dev/null; then
        kill -9 "$pid" 2>/dev/null || true
    fi

    rm -f "$PID_FILE"
    log "${GREEN}‚úì –°–µ—Ä–≤—ñ—Å –∑—É–ø–∏–Ω–µ–Ω–æ${NC}"
}

start_service() {
    if is_running; then
        log "${YELLOW}–°–µ—Ä–≤—ñ—Å –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: $(get_service_pid))${NC}"
        log "–ü–æ—Ä—Ç: http://$HOST:$PORT"
        exit 0
    fi

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    case "$VARIANT" in
        2B|2b)
            MODEL_FILE="$MODEL_DIR/google_gemma-3n-E2B-it-Q4_K_M.gguf"
            THREADS=6
            ;;
        4B|4b)
            MODEL_FILE="$MODEL_DIR/gemma-3n-e4b-q4_k_m.gguf"
            THREADS=7
            ;;
        *)
            log "${RED}‚úó –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç '$VARIANT' (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π 2B –∞–±–æ 4B)${NC}"
            exit 1
            ;;
    esac

    if [ ! -f "$MODEL_FILE" ]; then
        log "${RED}‚úó –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $MODEL_FILE${NC}"
        exit 1
    fi

    if [ ! -f "$LLAMA_SERVER" ]; then
        log "${RED}‚úó llama-server –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $LLAMA_SERVER${NC}"
        exit 1
    fi

    mkdir -p "$(dirname "$LOG_FILE")"

    log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log "ü§ñ Gemma $VARIANT Chat Service"
    log "–ú–æ–¥–µ–ª—å: $(basename $MODEL_FILE)"
    log "Bind: $HOST:$PORT"
    if [ "$HOST" = "0.0.0.0" ]; then
        log "–†–µ–∂–∏–º: –í—ñ–¥–¥–∞–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø (Tailscale)"
        # –û—Ç—Ä–∏–º–∞—Ç–∏ Tailscale IP —è–∫—â–æ —î (100.x.x.x –¥—ñ–∞–ø–∞–∑–æ–Ω)
        local ts_ip=$(ifconfig 2>/dev/null | grep "inet 100\." | awk '{print $2}' | head -1)
        if [ -n "$ts_ip" ]; then
            log "Tailscale: http://$ts_ip:$PORT"
        fi
    else
        log "–†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø"
    fi
    log "Threads: $THREADS"
    log "Context: $CTX_SIZE tokens"
    log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    # –ó–∞–ø—É—Å–∫ llama-server –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    nohup taskset -c 0-$((THREADS-1)) "$LLAMA_SERVER" \
        -m "$MODEL_FILE" \
        --host "$HOST" \
        --port "$PORT" \
        -t "$THREADS" \
        -c "$CTX_SIZE" \
        --temp 0.7 \
        -ngl 0 \
        --log-disable \
        >> "$LOG_FILE" 2>&1 &

    local pid=$!
    echo "$pid" > "$PID_FILE"

    sleep 3

    if ! kill -0 "$pid" 2>/dev/null; then
        log "${RED}‚úó –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É${NC}"
        cat "$LOG_FILE" | tail -20
        rm -f "$PID_FILE"
        exit 1
    fi

    log "${GREEN}‚úì –°–µ—Ä–≤—ñ—Å –∑–∞–ø—É—â–µ–Ω–æ (PID: $pid)${NC}"
    log ""
    log "${CYAN}üì° API Endpoints:${NC}"

    if [ "$HOST" = "0.0.0.0" ]; then
        log "  Local:      http://127.0.0.1:$PORT/completion"
        local ts_ip=$(ifconfig 2>/dev/null | grep "inet 100\." | awk '{print $2}' | head -1)
        if [ -n "$ts_ip" ]; then
            log "  Tailscale:  http://$ts_ip:$PORT/completion"
        fi
    else
        log "  Completion: http://$HOST:$PORT/completion"
        log "  Chat:       http://$HOST:$PORT/v1/chat/completions"
        log "  Health:     http://$HOST:$PORT/health"
    fi

    log ""
    log "${CYAN}üìù –ü—Ä–∏–∫–ª–∞–¥ curl –∑–∞–ø–∏—Ç—É:${NC}"
    log "  curl http://127.0.0.1:$PORT/completion -H 'Content-Type: application/json' -d '{\"prompt\":\"–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?\",\"n_predict\":100}'"
}

status_service() {
    if is_running; then
        echo -e "${GREEN}‚úì Gemma $VARIANT –ø—Ä–∞—Ü—é—î (PID: $(get_service_pid))${NC}"
        echo -e "  API: http://$HOST:$PORT"

        # –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ health
        if command -v curl >/dev/null 2>&1; then
            echo -e "\n${CYAN}Health check:${NC}"
            curl -s "http://$HOST:$PORT/health" 2>/dev/null || echo "  (—Å–µ—Ä–≤–µ—Ä —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...)"
        fi
        return 0
    else
        echo -e "${RED}‚úó –°–µ—Ä–≤—ñ—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ${NC}"
        return 1
    fi
}

test_chat() {
    if ! is_running; then
        echo -e "${RED}‚úó –°–µ—Ä–≤—ñ—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏: $0 start${NC}"
        exit 1
    fi

    echo -e "${CYAN}üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Gemma Chat API...${NC}\n"

    local prompt="–ü—Ä–∏–≤—ñ—Ç! –†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ —Å–µ–±–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."

    echo -e "${YELLOW}Prompt:${NC} $prompt\n"

    curl -s "http://$HOST:$PORT/completion" \
        -H "Content-Type: application/json" \
        -d "{\"prompt\":\"$prompt\",\"n_predict\":150,\"temperature\":0.7}" | \
        python3 -c "import sys,json; print(json.load(sys.stdin)['content'])" 2>/dev/null || \
        echo -e "${RED}–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ${NC}"
}

# CLI
COMMAND="${1:-start}"
shift || true

while [ $# -gt 0 ]; do
    case "$1" in
        --variant) VARIANT="$2"; shift 2 ;;
        --port) PORT="$2"; shift 2 ;;
        --host) HOST="$2"; shift 2 ;;
        *) shift ;;
    esac
done

case "$COMMAND" in
    start) start_service ;;
    stop) stop_service ;;
    restart) stop_service; sleep 1; start_service ;;
    status) status_service ;;
    test) test_chat ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|test} [OPTIONS]"
        echo ""
        echo "OPTIONS:"
        echo "  --variant 2B|4B    –ú–æ–¥–µ–ª—å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 2B)"
        echo "  --port PORT        HTTP –ø–æ—Ä—Ç (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 8080)"
        echo "  --host HOST        Bind –∞–¥—Ä–µ—Å–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 127.0.0.1)"
        echo ""
        echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
        echo "  # –õ–æ–∫–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø:"
        echo "  $0 start --variant 2B --port 8080"
        echo ""
        echo "  # –í—ñ–¥–¥–∞–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Tailscale:"
        echo "  $0 start --variant 2B --port 8080 --host 0.0.0.0"
        echo ""
        echo "  # –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏:"
        echo "  $0 status"
        echo "  $0 test"
        echo "  $0 stop"
        exit 1
        ;;
esac
